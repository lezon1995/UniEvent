// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY Disposables.tt. DO NOT CHANGE IT.
// </auto-generated>
using System;

namespace UniEvent
{
    public static partial class DisposableBag
    {
        public static IDisposable Create(IDisposable d1)
        {
            return new Disposable1(d1);
        }

        sealed class Disposable1 : IDisposable
        {
            bool disposed;
            IDisposable disposable1;
            
            public Disposable1(IDisposable d1)
            {
                disposable1 = d1;
            }

            public void Dispose()
            {
                if (!disposed)
                {
                    disposed = true;
                    disposable1.Dispose();
                }
            }
        }

        public static IDisposable Create(IDisposable d1, IDisposable d2)
        {
            return new Disposable2(d1, d2);
        }

        sealed class Disposable2 : IDisposable
        {
            bool disposed;
            IDisposable disposable1;
            IDisposable disposable2;
            
            public Disposable2(IDisposable d1, IDisposable d2)
            {
                disposable1 = d1;
                disposable2 = d2;
            }

            public void Dispose()
            {
                if (!disposed)
                {
                    disposed = true;
                    disposable1.Dispose();
                    disposable2.Dispose();
                }
            }
        }

        public static IDisposable Create(IDisposable d1, IDisposable d2, IDisposable d3)
        {
            return new Disposable3(d1, d2, d3);
        }

        sealed class Disposable3 : IDisposable
        {
            bool disposed;
            IDisposable disposable1;
            IDisposable disposable2;
            IDisposable disposable3;
            
            public Disposable3(IDisposable d1, IDisposable d2, IDisposable d3)
            {
                disposable1 = d1;
                disposable2 = d2;
                disposable3 = d3;
            }

            public void Dispose()
            {
                if (!disposed)
                {
                    disposed = true;
                    disposable1.Dispose();
                    disposable2.Dispose();
                    disposable3.Dispose();
                }
            }
        }

        public static IDisposable Create(IDisposable d1, IDisposable d2, IDisposable d3, IDisposable d4)
        {
            return new Disposable4(d1, d2, d3, d4);
        }

        sealed class Disposable4 : IDisposable
        {
            bool disposed;
            IDisposable disposable1;
            IDisposable disposable2;
            IDisposable disposable3;
            IDisposable disposable4;
            
            public Disposable4(IDisposable d1, IDisposable d2, IDisposable d3, IDisposable d4)
            {
                disposable1 = d1;
                disposable2 = d2;
                disposable3 = d3;
                disposable4 = d4;
            }

            public void Dispose()
            {
                if (!disposed)
                {
                    disposed = true;
                    disposable1.Dispose();
                    disposable2.Dispose();
                    disposable3.Dispose();
                    disposable4.Dispose();
                }
            }
        }

        public static IDisposable Create(IDisposable d1, IDisposable d2, IDisposable d3, IDisposable d4, IDisposable d5)
        {
            return new Disposable5(d1, d2, d3, d4, d5);
        }

        sealed class Disposable5 : IDisposable
        {
            bool disposed;
            IDisposable disposable1;
            IDisposable disposable2;
            IDisposable disposable3;
            IDisposable disposable4;
            IDisposable disposable5;
            
            public Disposable5(IDisposable d1, IDisposable d2, IDisposable d3, IDisposable d4, IDisposable d5)
            {
                disposable1 = d1;
                disposable2 = d2;
                disposable3 = d3;
                disposable4 = d4;
                disposable5 = d5;
            }

            public void Dispose()
            {
                if (!disposed)
                {
                    disposed = true;
                    disposable1.Dispose();
                    disposable2.Dispose();
                    disposable3.Dispose();
                    disposable4.Dispose();
                    disposable5.Dispose();
                }
            }
        }

        public static IDisposable Create(IDisposable d1, IDisposable d2, IDisposable d3, IDisposable d4, IDisposable d5, IDisposable d6)
        {
            return new Disposable6(d1, d2, d3, d4, d5, d6);
        }

        sealed class Disposable6 : IDisposable
        {
            bool disposed;
            IDisposable disposable1;
            IDisposable disposable2;
            IDisposable disposable3;
            IDisposable disposable4;
            IDisposable disposable5;
            IDisposable disposable6;
            
            public Disposable6(IDisposable d1, IDisposable d2, IDisposable d3, IDisposable d4, IDisposable d5, IDisposable d6)
            {
                disposable1 = d1;
                disposable2 = d2;
                disposable3 = d3;
                disposable4 = d4;
                disposable5 = d5;
                disposable6 = d6;
            }

            public void Dispose()
            {
                if (!disposed)
                {
                    disposed = true;
                    disposable1.Dispose();
                    disposable2.Dispose();
                    disposable3.Dispose();
                    disposable4.Dispose();
                    disposable5.Dispose();
                    disposable6.Dispose();
                }
            }
        }

        public static IDisposable Create(IDisposable d1, IDisposable d2, IDisposable d3, IDisposable d4, IDisposable d5, IDisposable d6, IDisposable d7)
        {
            return new Disposable7(d1, d2, d3, d4, d5, d6, d7);
        }

        sealed class Disposable7 : IDisposable
        {
            bool disposed;
            IDisposable disposable1;
            IDisposable disposable2;
            IDisposable disposable3;
            IDisposable disposable4;
            IDisposable disposable5;
            IDisposable disposable6;
            IDisposable disposable7;
            
            public Disposable7(IDisposable d1, IDisposable d2, IDisposable d3, IDisposable d4, IDisposable d5, IDisposable d6, IDisposable d7)
            {
                disposable1 = d1;
                disposable2 = d2;
                disposable3 = d3;
                disposable4 = d4;
                disposable5 = d5;
                disposable6 = d6;
                disposable7 = d7;
            }

            public void Dispose()
            {
                if (!disposed)
                {
                    disposed = true;
                    disposable1.Dispose();
                    disposable2.Dispose();
                    disposable3.Dispose();
                    disposable4.Dispose();
                    disposable5.Dispose();
                    disposable6.Dispose();
                    disposable7.Dispose();
                }
            }
        }

    }

    public partial class DisposableBagBuilder
    {
        public IDisposable Build()
        {
            switch (disposables.Count)
            {
                case 0:
                    return DisposableBag.Empty;
                case 1:
                    return DisposableBag.Create(disposables[0]);
                case 2:
                    return DisposableBag.Create(disposables[0], disposables[1]);
                case 3:
                    return DisposableBag.Create(disposables[0], disposables[1], disposables[2]);
                case 4:
                    return DisposableBag.Create(disposables[0], disposables[1], disposables[2], disposables[3]);
                case 5:
                    return DisposableBag.Create(disposables[0], disposables[1], disposables[2], disposables[3], disposables[4]);
                case 6:
                    return DisposableBag.Create(disposables[0], disposables[1], disposables[2], disposables[3], disposables[4], disposables[5]);
                case 7:
                    return DisposableBag.Create(disposables[0], disposables[1], disposables[2], disposables[3], disposables[4], disposables[5], disposables[6]);
                default:
                    return DisposableBag.Create(disposables.ToArray());
            }
        }
    }
}